import tidalapi
import pathlib


class CtrlTidal:
    """Interface to Tidal account"""

    def __init__(self) -> None:
        """starts a Tidal session"""
        self.session = session = tidalapi.Session()
        session.login_oauth_simple()

    def searchForSong(self, songTitle: str):
        """searches for a song in Tidal

        Args:
            songTitle (str): Title and Artist of song

        Returns:
            tidalapi.tracks: tracks
        """
        models = list()
        models.append(tidalapi.media.Track)
        res = self.session.search(songTitle, models=models)
        return res["tracks"]

    def genPlaylist(self, playlistName: str, songs: list[str]):
        """generates a new playlist

        Args:
            playlistName (str): name of the new playlist
            songs (list): list of strings of songs to add
        """
        playlist = self.session.user.create_playlist(
            playlistName, "An autogenerated playlist"
        )
        for song in songs:
            tracks = self.searchForSong(song)
            if tracks:
                t1 = tracks[0]
                playlist.add([t1.id])
                print(f"added {t1.artist.name} - {t1.name}")
            else:
                print(f"could not find song {song}")


def readSonglist(fName: pathlib.Path):
    """takes a filename, opens file and reads it to lines

    Args:
        fName (pathlib.Path): name of the textfile to open and

    Returns:
        list[str]: lines of files as list of strings
    """
    with open(fName) as file:
        lines = [line.rstrip() for line in file]
    return lines


def main():
    """main function, do your magic here"""
    fName = pathlib.Path(
        r"C:\Users\Blade\Documents\Coding\Python\TidalIF\ListOfSongs.txt"
    )
    songs = readSonglist(fName)
    dummy = CtrlTidal()
    dummy.genPlaylist(songs[0], songs[1:])


if __name__ == "__main__":
    """best place to implement your argument parser or configure an existing one"""
    main()
